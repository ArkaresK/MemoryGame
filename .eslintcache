[{"C:\\Users\\Calvin\\memorygmae\\src\\index.js":"1","C:\\Users\\Calvin\\memorygmae\\src\\card.js":"2","C:\\Users\\Calvin\\memorygmae\\src\\game.js":"3","C:\\Users\\Calvin\\memorygmae\\src\\header.js":"4"},{"size":467,"mtime":1608671064023,"results":"5","hashOfConfig":"6"},{"size":747,"mtime":1608636074553,"results":"7","hashOfConfig":"6"},{"size":12624,"mtime":1608672193346,"results":"8","hashOfConfig":"6"},{"size":373,"mtime":1608670978754,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5iltpy",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\Calvin\\memorygmae\\src\\index.js",[],["20","21"],"C:\\Users\\Calvin\\memorygmae\\src\\card.js",[],"C:\\Users\\Calvin\\memorygmae\\src\\game.js",["22","23","24","25","26","27","28","29","30"],"import React from 'react';\r\nimport Card from './card'\r\n\r\n\r\nexport default class PlayGround extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardImage: ['Aatrox', 'Ashe', 'Bard', 'Caitlyn', 'Darius', 'Ekko', 'Ezreal', 'Irelia', 'Jhin', 'Mordekaiser', 'Nasus', 'Nautilus', 'Pyke', 'Shen', 'Talon',\r\n                'Lux', 'Master_Yi', 'Riven', 'Sion', 'Swain', 'Twisted_Fate', 'Vayne', 'Vladimir', 'Xin_Zhao', 'Yasuo'],\r\n            duplicatedCards: [],\r\n            randomizedCards: [],\r\n            finalizedCards: [],\r\n            openedCards: [],\r\n            score: 0,\r\n            matchedCards: 0,\r\n            win: false,\r\n            /* Timer */\r\n            minutes: 0,\r\n            seconds: 0,\r\n            millis: 0,\r\n            running: false,\r\n\r\n            page1: true,\r\n            page2: false,\r\n            page3: false,\r\n\r\n            name: '',\r\n            pairs: 15,\r\n            IsNext: 'human',\r\n            playingvsbot: 'false',\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleStartClick = this.handleStartClick.bind(this);\r\n        this.handleStopClick = this.handleStopClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.easy = this.easy.bind(this);\r\n        this.normal = this.normal.bind(this);\r\n        this.hard = this.hard.bind(this);\r\n        this.start = this.start.bind(this)\r\n        this.Bot = this.Bot.bind(this)\r\n        this.solo = this.solo.bind(this)\r\n        this.playingBot = this.playingBot.bind(this)\r\n\r\n    }\r\n    /* Pseudo */\r\n    handleChange(event) {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ page1: false, page2: true });\r\n    }\r\n\r\n\r\n    /* Timer*/\r\n    handleStartClick() {\r\n        if (!this.state.running) {\r\n            this.interval = setInterval(() => {\r\n                this.tick();\r\n            }, 100)\r\n\r\n            this.setState({ running: true })\r\n        }\r\n    }\r\n\r\n    handleStopClick() {\r\n        if (this.state.running) {\r\n            clearInterval(this.interval);\r\n            this.setState({ running: false })\r\n        }\r\n    }\r\n\r\n\r\n    tick() {\r\n        let millis = this.state.millis + 1;\r\n        let seconds = this.state.seconds;\r\n        let minutes = this.state.minutes;\r\n\r\n        if (millis === 10) {\r\n            millis = 0;\r\n            seconds = seconds + 1;\r\n        }\r\n\r\n        if (seconds === 60) {\r\n            millis = 0;\r\n            seconds = 0;\r\n            minutes = minutes + 1;\r\n        }\r\n\r\n        this.update(millis, seconds, minutes);\r\n    }\r\n\r\n    zeroPad(value) {\r\n        return value < 10 ? `0${value}` : value;\r\n    }\r\n\r\n    update(millis, seconds, minutes) {\r\n        this.setState({\r\n            millis: millis,\r\n            seconds: seconds,\r\n            minutes: minutes\r\n        });\r\n    }\r\n\r\n\r\n    /*Game*/\r\n\r\n    handleClick(name, index) {\r\n        console.log(name);\r\n        console.log(index);\r\n        console.log(this.state.finalizedCards)\r\n        this.handleStartClick();\r\n        if (this.state.openedCards.length === 2) {\r\n            setTimeout(() => {\r\n                this.check();\r\n\r\n            }, 750);\r\n\r\n\r\n        } else {\r\n            let Image = {\r\n                name,\r\n                index\r\n            }\r\n            let finalizedCards = this.state.finalizedCards\r\n            let cardImage = this.state.openedCards\r\n            finalizedCards[index].close = false\r\n            cardImage.push(Image)\r\n            this.setState({\r\n                openedCards: cardImage,\r\n                finalizedCards: finalizedCards\r\n            })\r\n            if (this.state.openedCards.length === 2) {\r\n                setTimeout(() => {\r\n                    this.check()\r\n                }, 750);\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    Bot() {\r\n        let currentIndex = this.state.finalizedCards.length;\r\n        let randomIndex = Math.floor(Math.random() * currentIndex);\r\n        let randomIndex2 = Math.floor(Math.random() * currentIndex);\r\n        if (this.state.IsNext === 'bot') {\r\n            setTimeout(() => {\r\n                document.getElementsByClassName('card')[randomIndex2].click()\r\n            document.getElementsByClassName('card')[randomIndex].click()  \r\n            }, 750);\r\n            \r\n        }\r\n    }\r\n\r\n    check() {\r\n        this.state.IsNext === 'human' ? this.setState({IsNext : 'bot'}) : this.setState({IsNext : 'human'});\r\n        let finalizedCards = this.state.finalizedCards\r\n        if ((this.state.openedCards[0].name === this.state.openedCards[1].name) && (this.state.openedCards[0].index !== this.state.openedCards[1].index)) {\r\n            finalizedCards[this.state.openedCards[0].index].complete = true\r\n            finalizedCards[this.state.openedCards[1].index].complete = true\r\n            this.setState({ score: this.state.score + 3 })\r\n            this.setState({ matchedCards: this.state.matchedCards + 1 })\r\n            if (this.state.matchedCards === this.state.cardImage.length) { this.setState({win : true}) }\r\n        } else {\r\n            finalizedCards[this.state.openedCards[0].index].close = true\r\n            finalizedCards[this.state.openedCards[1].index].close = true\r\n            this.setState({ score: this.state.score <= 0 ? this.state.score : this.state.score - 1 })\r\n        }\r\n        this.setState({\r\n            finalizedCards,\r\n            openedCards: []\r\n        });\r\n        if (this.state.playingvsbot) { this.Bot() };\r\n    }\r\n    start() {\r\n        this.state.cardImage = this.shuffle(this.state.cardImage)\r\n        this.state.cardImage.length = this.state.pairs;\r\n        let finalizedCards = [];\r\n        this.state.duplicatedCards = this.state.cardImage.concat(this.state.cardImage)\r\n        this.state.randomizedCards = this.shuffle(this.state.duplicatedCards)\r\n        this.state.randomizedCards.map((name) => {\r\n            finalizedCards.push({\r\n                name,\r\n                close: true,\r\n                complete: false,\r\n                fail: false\r\n            })\r\n        })\r\n        this.state.finalizedCards = finalizedCards;\r\n        console.log(this.start.duplicatedCards)\r\n\r\n    }\r\n    shuffle(array) {\r\n        let currentIndex = array.length, temporaryValue, randomIndex;\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array\r\n    }\r\n\r\n    /* Render */\r\n    PrintWinner() {\r\n        if (this.state.win) {\r\n            this.handleStopClick();\r\n            const points_bonus = this.state.pairs === 6 ? (this.state.seconds <= 30 ? 3 : 0) : this.state.pairs === 12 ? \r\n                (this.state.seconds <= 50 ? 3 : 0) : this.state.pairs === 15 ? (this.state.minutes <= 2 ? 3 : 0) : 0;\r\n            return (\r\n                <div className=\"victory\">Bien Joué {this.state.name} ! <br></br>Tu as Gagné avec {this.state.score + points_bonus} points  dont {points_bonus} points bonus et un temps de {this.state.minutes < 1 ? '' : this.state.minutes + 'minutes '} {this.state.seconds} secondes\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    login_page() {\r\n        return (\r\n            <div className=\"page1\">\r\n                <div className=\"page_title\">Bienvenue sur le jeu Memory Game réalisé en Reactjs</div>\r\n                <div className=\"rule\">\r\n                    <ul className=\"rules\">Les règles du jeu :\r\n                        <li>Le joueur doit retourner 2 cartes identiques afin de remporter la paire</li>\r\n                        <li>Retourner 2 cartes identiques rapporte 3 points</li>\r\n                        <li>Retourner 2 cartes différentes fait perdre 1 points (toutefois, le score ne peut descendre en dessous de 0)</li>\r\n                        <li>Terminer rapidement la partie rapporte des points supplémentaires</li>\r\n                        <li>Le chronomètre se lancera automatiquement après la première carte retourné</li>\r\n                        <li>Récupérer toutes les paires du plateau afin de gagner</li>\r\n                    </ul>\r\n                </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Pseudo :<br></br>\r\n                        <input type=\"text\" value={this.state.name} onChange={this.handleChange} required />\r\n                    </label><br></br>\r\n                    <input type=\"submit\" value=\"Jouer\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n    game_page() {\r\n        return (<div>\r\n                    {this.state.win ? this.PrintWinner() :\r\n                        <div className=\"txt\">Pseudo : {this.state.name}\r\n                            <div className=\"segments\">\r\n                                <span className=\"mins\">Timer : {this.zeroPad(this.state.minutes)}:</span>\r\n                                <span className=\"secs\">{this.zeroPad(this.state.seconds)} </span>\r\n                                <span className=\"millis\">.{this.state.millis}</span>\r\n                            </div>\r\n                            <div className=\"score\"> Score : {this.state.score}</div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"playground\">\r\n                        {\r\n                            this.state.finalizedCards.map((Image, index) => {\r\n                                return <Card Image={Image.name} click={() => { this.handleClick(Image.name, index) }} close={Image.close} complete={Image.complete} />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n    bot_page() {\r\n        return (\r\n            <div className=\"difficulty\">\r\n                Choisir la difficulté de la partie :\r\n                <div>\r\n                    <a href=\"# \" onClick={this.playingBot}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">Jouer contre l'ordinateur</span></p>\r\n                    </a>\r\n                    <a className=\"transparent\" href=\"# \" onClick={this.solo}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">Jouer seul</span></p>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    playingBot() {\r\n        this.setState({ page3: false });\r\n        this.setState({playingvsbot : true});\r\n        console.log(this.state.playingvsbot)\r\n    }\r\n    solo() {\r\n        this.setState({ page3: false });\r\n        this.setState({playingvsbot : false});\r\n        console.log(this.state.playingvsbot)\r\n    }\r\n    loadPage3() {\r\n        this.setState({ page2: false, page3: true });\r\n    }\r\n    easy() {\r\n        this.state.pairs = 6;\r\n        this.loadPage3();\r\n        this.start();\r\n    }\r\n    normal() {\r\n        this.state.pairs = 12;\r\n        this.loadPage3();\r\n        this.start();\r\n    }\r\n    hard() {\r\n        document.body.style.height = \"1200px\";\r\n        this.state.pairs = 15;\r\n        this.loadPage3();\r\n        this.start();\r\n    }\r\n    difficulty_page() {\r\n        return (\r\n            <div className=\"difficulty\">\r\n                Choisir la difficulté de la partie :\r\n                <div>\r\n                    <a href=\"# \" onClick={this.easy}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">Facile : 6 paires</span></p>\r\n                    </a>\r\n                    <a className=\"white\" href=\"# \" onClick={this.normal}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">Moyen : 12 paires</span></p>\r\n                    </a>\r\n                    <a className=\"transparent\" href=\"# \" onClick={this.hard}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">Difficile : 15 paires</span></p>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.page1 ? this.login_page() : this.state.page2 ? this.difficulty_page() : this.state.page3 ? this.bot_page() : this.game_page()}\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Calvin\\memorygmae\\src\\header.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":179,"column":9,"nodeType":"37","endLine":179,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":180,"column":9,"nodeType":"37","endLine":180,"endColumn":29},{"ruleId":"35","severity":1,"message":"36","line":182,"column":9,"nodeType":"37","endLine":182,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":183,"column":9,"nodeType":"37","endLine":183,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":184,"column":47,"nodeType":"40","messageId":"41","endLine":184,"endColumn":49},{"ruleId":"35","severity":1,"message":"36","line":192,"column":9,"nodeType":"37","endLine":192,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":296,"column":9,"nodeType":"37","endLine":296,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":301,"column":9,"nodeType":"37","endLine":301,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":307,"column":9,"nodeType":"37","endLine":307,"endColumn":19},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]